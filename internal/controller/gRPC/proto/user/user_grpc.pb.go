// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.0
// source: internal/controller/gRPC/proto/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 一元调用 - 获取单个用户信息
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// 服务端流式调用 - 批量获取用户信息
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (UserService_GetUserListClient, error)
	// 客户端流式调用 - 批量创建用户
	BatchCreateUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_BatchCreateUsersClient, error)
	// 双向流式调用 - 实时用户信息同步
	SyncUserInfo(ctx context.Context, opts ...grpc.CallOption) (UserService_SyncUserInfoClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (UserService_GetUserListClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/user.UserService/GetUserList", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetUserListClient interface {
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userServiceGetUserListClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserListClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) BatchCreateUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_BatchCreateUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/user.UserService/BatchCreateUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceBatchCreateUsersClient{stream}
	return x, nil
}

type UserService_BatchCreateUsersClient interface {
	Send(*CreateUserRequest) error
	CloseAndRecv() (*BatchCreateUsersResponse, error)
	grpc.ClientStream
}

type userServiceBatchCreateUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceBatchCreateUsersClient) Send(m *CreateUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceBatchCreateUsersClient) CloseAndRecv() (*BatchCreateUsersResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatchCreateUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SyncUserInfo(ctx context.Context, opts ...grpc.CallOption) (UserService_SyncUserInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], "/user.UserService/SyncUserInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSyncUserInfoClient{stream}
	return x, nil
}

type UserService_SyncUserInfoClient interface {
	Send(*UserInfoSync) error
	Recv() (*UserInfoSync, error)
	grpc.ClientStream
}

type userServiceSyncUserInfoClient struct {
	grpc.ClientStream
}

func (x *userServiceSyncUserInfoClient) Send(m *UserInfoSync) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSyncUserInfoClient) Recv() (*UserInfoSync, error) {
	m := new(UserInfoSync)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// 一元调用 - 获取单个用户信息
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// 服务端流式调用 - 批量获取用户信息
	GetUserList(*GetUserListRequest, UserService_GetUserListServer) error
	// 客户端流式调用 - 批量创建用户
	BatchCreateUsers(UserService_BatchCreateUsersServer) error
	// 双向流式调用 - 实时用户信息同步
	SyncUserInfo(UserService_SyncUserInfoServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) GetUserList(*GetUserListRequest, UserService_GetUserListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserServiceServer) BatchCreateUsers(UserService_BatchCreateUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchCreateUsers not implemented")
}
func (UnimplementedUserServiceServer) SyncUserInfo(UserService_SyncUserInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncUserInfo not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetUserList(m, &userServiceGetUserListServer{stream})
}

type UserService_GetUserListServer interface {
	Send(*GetUserInfoResponse) error
	grpc.ServerStream
}

type userServiceGetUserListServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserListServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_BatchCreateUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).BatchCreateUsers(&userServiceBatchCreateUsersServer{stream})
}

type UserService_BatchCreateUsersServer interface {
	SendAndClose(*BatchCreateUsersResponse) error
	Recv() (*CreateUserRequest, error)
	grpc.ServerStream
}

type userServiceBatchCreateUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceBatchCreateUsersServer) SendAndClose(m *BatchCreateUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceBatchCreateUsersServer) Recv() (*CreateUserRequest, error) {
	m := new(CreateUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_SyncUserInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SyncUserInfo(&userServiceSyncUserInfoServer{stream})
}

type UserService_SyncUserInfoServer interface {
	Send(*UserInfoSync) error
	Recv() (*UserInfoSync, error)
	grpc.ServerStream
}

type userServiceSyncUserInfoServer struct {
	grpc.ServerStream
}

func (x *userServiceSyncUserInfoServer) Send(m *UserInfoSync) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSyncUserInfoServer) Recv() (*UserInfoSync, error) {
	m := new(UserInfoSync)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserList",
			Handler:       _UserService_GetUserList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BatchCreateUsers",
			Handler:       _UserService_BatchCreateUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncUserInfo",
			Handler:       _UserService_SyncUserInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/controller/gRPC/proto/user/user.proto",
}
